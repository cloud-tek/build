name: "dotnet.yml (reusable)"

# # env:
# #   NETCORE_VERSION: 6.0.100
# #   ACTIONS_ALLOW_UNSECURE_COMMANDS: true
# #   DOTNET_ROLL_FORWARD: Major

on:
  workflow_call:
    secrets:
      NuGetApiKey:
        description: "NuGet API Key"
        required: false
    inputs:
      Directory:
        description: "Project directory"
        type: string
        required: true
      NetCoreVersion:
        type: string
        required: true
      Compile:
        description: "Flag indicating if Compile task is to be run"
        type: boolean
        default: false
        required: false
      Publish:
        description: "Flag indicating if Publish task is to be run after the Unit&Integration tests"
        type: boolean
        default: false
        required: false
      Pack:
        description: "Flag indicating if Pack task is to be run after the Unit&Integration tests"
        type: boolean
        default: false
        required: false
      Push:
        description: "Flag indicating if Push task is to be run after the Pack task"
        type: boolean
        default: false
        required: false
      UnitTests:
        description: "Flag indicating if UnitTests task is to be run"
        type: boolean
        default: false
        required: false
      IntegrationTests:
        description: "Flag indicating if IntegrationTests task is to be run"
        type: boolean
        default: false
        required: false
      ModuleTests:
        description: "Flag indicating if ModuleTests task is to be run"
        type: boolean
        default: false
        required: false
      SystemTests:
        description: "Flag indicating if SystemTests task is to be run"
        type: boolean
        default: false
        required: false
      SmokeTests:
        description: "Flag indicating if SmokeTests task is to be run"
        type: boolean
        default: false
        required: false
      NuGetApiUrl:
        description: "NuGet Url"
        type: string
        required: false

jobs:
  nuke:
    name: nuke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - id: auto-release
        uses: cloud-tek/actions/auto-release@0.12
        with:
          branch: main
          configuration: .config/configuration.changelog.json
      - name: setup gitversion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: run giversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - uses: actions/setup-dotnet@v1
        if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        name: dotnet installer
        with:
          dotnet-version: ${{ inputs.NetCoreVersion }}
      # - name: nuget.config (pwsh)
      #   shell: pwsh
      #   run: |
      #     $nuget = @"
      #     <?xml version="1.0" encoding="utf-8"?>
      #     <configuration>
      #       <packageSources>
      #         <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
      #         <add key="nuget.cloudtek.io" value="${{ secrets.NuGetFeedCloudTek }}" protocolVersion="3"/>
      #       </packageSources>
      #       <packageRestore>
      #         <add key="enabled" value="True" />
      #         <add key="automatic" value="True" />
      #       </packageRestore>
      #       <bindingRedirects>
      #         <add key="skip" value="False" />
      #       </bindingRedirects>
      #       <packageManagement>
      #         <add key="format" value="0" />
      #         <add key="disabled" value="False" />
      #       </packageManagement>
      #       <packageSourceCredentials>
      #         <nuget.cloudtek.io>
      #           <add key="Username" value="${{ secrets.NuGetUsername }}"/>
      #           <add key="ClearTextPassword" value="${{ secrets.NuGetPassword }}" />
      #         </nuget.cloudtek.io>
      #       </packageSourceCredentials>
      #     </configuration>
      #     "@
      #     $nuget | Out-File -FilePath ${{ github.workspace }}/nuget.config
      - name: global.json
        if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        shell: bash
        run: |
          if [ -f "${{ github.workspace }}/global.json" ]; then
            echo "global.json exists"
          else
            echo "{ \"tools\": { \"dotnet\": \"${{ inputs.NetCoreVersion }}\" } }" > ${{ github.workspace }}/global.json
          fi
      - run: |
          dotnet nuget list source
          dotnet tool restore
        name: dotnet tool restore
        if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        shell: bash
      - name: dotnet nuke --target Compile
        if: ${{ inputs.Compile && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        shell: bash
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target Compile
      - name: dotnet nuke UnitTests
        shell: bash
        if: ${{ inputs.UnitTests && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target UnitTests --skip Compile RunChecks Clean
      - name: dotnet nuke --target IntegrationTests
        shell: bash
        if: ${{ inputs.IntegrationTests && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke IntegrationTests --skip Compile RunChecks Clean
      - name: diag
        run: |
          tree ${{ github.workspace }}/results
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: ${{ inputs.UnitTests }} || ${{ inputs.IntegrationTests }} && (success() || failure())
        with:
          name: XUnit Tests # Name of the check run which will be created
          path: ${{ github.workspace }}/results/tests/*.trx
          reporter: dotnet-trx # Format of test results
      - name: dotnet nuke --target Publish
        shell: bash
        if: ${{ inputs.Publish && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke Publish --target --skip Compile RunChecks
      - name: dotnet nuke --target Pack
        shell: bash
        if: ${{ inputs.Pack && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target Pack --skip Compile RunChecks
      - name: dotnet nuke --target Push
        shell: bash
        if: ${{ inputs.Push && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target Push --nuget-api-url ${{ inputs.NuGetApiUrl }} --nuget-api-key ${{ secrets.NuGetApiKey }}
      # - name: dotnet nuke ModuleTests
      #   shell: bash
      #   if: ${{ inputs.ModuleTests && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
      #   working-directory: ${{ inputs.Directory }}
      #   run: |
      #     dotnet nuke --target ModuleTests --skip Compile RunChecks
      # - name: dotnet nuke SystemTests
      #   shell: bash
      #   if: ${{ inputs.SystemTests && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
      #   working-directory: ${{ inputs.Directory }}
      #   run: |
      #     dotnet nuke SystemTests
      # https://github.com/marketplace/actions/test-reporter
    # https://github.com/marketplace/actions/cobertura-report
    # - uses: 5monkeys/cobertura-action@master
    #   with:
    #     path: test/results/*.trx
    #     repo_token: ${{ secrets.GITHUB_TOKEN }}
    #     minimum_coverage: 1
