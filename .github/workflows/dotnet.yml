name: "dotnet.yml (reusable)"
on:
  workflow_call:
    secrets:
      NUGET_API_KEY:
        description: "NuGet API Key"
        required: false
      GH_TOKEN:
        description: "GitHub Token"
        required: false
    inputs:
      Directory:
        description: "Project directory"
        type: string
        required: true
      NetCoreVersion:
        type: string
        required: true
      Compile:
        description: "Flag indicating if Compile task is to be run"
        type: boolean
        default: false
        required: false
      Publish:
        description: "Flag indicating if Publish task is to be run after the Unit&Integration tests"
        type: boolean
        default: false
        required: false
      Pack:
        description: "Flag indicating if Pack task is to be run after the Unit&Integration tests"
        type: boolean
        default: false
        required: false
      Push:
        description: "Flag indicating if Push task is to be run after the Pack task"
        type: boolean
        default: false
        required: false
      UnitTests:
        description: "Flag indicating if UnitTests task is to be run"
        type: boolean
        default: false
        required: false
      IntegrationTests:
        description: "Flag indicating if IntegrationTests task is to be run"
        type: boolean
        default: false
        required: false
      ModuleTests:
        description: "Flag indicating if ModuleTests task is to be run"
        type: boolean
        default: false
        required: false
      SystemTests:
        description: "Flag indicating if SystemTests task is to be run"
        type: boolean
        default: false
        required: false
      SmokeTests:
        description: "Flag indicating if SmokeTests task is to be run"
        type: boolean
        default: false
        required: false
      NuGetApiUrl:
        description: "NuGet Url"
        type: string
        required: false

jobs:
  nuke:
    name: nuke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
          token: ${{ secrets.GH_TOKEN }}
      - shell: bash
        name: git config
        if: |
          github.ref == 'refs/heads/main' &&
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - id: auto-tag
        if: |
          github.ref == 'refs/heads/main' &&
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        uses: cloud-tek/actions/auto-tag@0.12
        with:
          branch: refs/heads/main
      - uses: actions/setup-dotnet@v1
        if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        name: dotnet installer
        with:
          dotnet-version: ${{ inputs.NetCoreVersion }}
      - name: global.json
        if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        shell: bash
        run: |
          if [ -f "${{ github.workspace }}/global.json" ]; then
            echo "global.json exists"
          else
            echo "{ \"tools\": { \"dotnet\": \"${{ inputs.NetCoreVersion }}\" } }" > ${{ github.workspace }}/global.json
          fi
      - name: setup gitversion
        uses: gittools/actions/gitversion/setup@v0.12.1
        with:
          versionSpec: '5.x'
      - name: run giversion
        uses: gittools/actions/gitversion/execute@v0.12.1
      - run: |
          dotnet nuget list source
          dotnet tool restore
        name: dotnet tool restore
        if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        shell: bash
      - name: dotnet nuke --target Compile
        if: ${{ inputs.Compile && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        shell: bash
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target Compile
      - name: dotnet nuke UnitTests
        shell: bash
        if: ${{ inputs.UnitTests && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target UnitTests --skip Compile RunChecks Clean
      - name: dotnet nuke --target IntegrationTests
        shell: bash
        if: ${{ inputs.IntegrationTests && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke IntegrationTests --skip Compile RunChecks Clean
      - name: diag
        run: |
          tree ${{ github.workspace }}/results
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: ${{ inputs.UnitTests }} || ${{ inputs.IntegrationTests }} && (success() || failure())
        with:
          name: XUnit Tests # Name of the check run which will be created
          path: ${{ github.workspace }}/results/tests/*.trx
          reporter: dotnet-trx # Format of test results
      - name: dotnet nuke --target Publish
        shell: bash
        if: ${{ inputs.Publish && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke Publish --target --skip Compile RunChecks
      - name: dotnet nuke --target Pack
        shell: bash
        if: ${{ inputs.Pack && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target Pack --skip Compile RunChecks
      - name: dotnet nuke --target Push
        shell: bash
        if: ${{ inputs.Push && !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && github.ref == inputs.branch) }}
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target Push --nuget-api-url ${{ inputs.NuGetApiUrl }} --nuget-api-key ${{ secrets.NUGET_API_KEY }}
      - shell: bash
        name: gh release create
        if: |
          github.ref == 'refs/heads/main' &&
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          if [[ $BRANCH =~ (release)(\/|-)([0-9]+\.[0-9]+) ]]
          then
            echo "${{ github.event.pull_request.head.ref }} --> ${{ github.ref }} (tag: ${BASH_REMATCH[3]})"
            gh release create ${BASH_REMATCH[3]} --title "Release ${BASH_REMATCH[3]}" --verify-tag
          else
            echo "${{ github.event.pull_request.head.ref }} --> ${{ github.ref }} (tag: none)"
          fi